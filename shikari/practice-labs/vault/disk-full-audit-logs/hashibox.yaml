plain: true
provision:
  - mode: system  # create a temporary disk and mount it for use with Vault audit logs.
    script: |
      #!/usr/bin/env bash

      # avoid running the script on restarts

      if [[ -f /shikari-bootstrapped ]]; then
        exit 0
      fi
      
      dd if=/dev/zero of=./2M-disk bs=1024k count=2

      LOOPPATH=$(losetup --show --find ./2M-disk)

      mkfs.ext4 $LOOPPATH

      mkdir -p /opt/vault/audit

      cp /etc/fstab /etc/fstab.orig

      if ! grep -q ./2M-disk /etc/fstab; then
        echo "Adding temporary disk to /etc/fstab"
        echo "$(pwd)/2M-disk /opt/vault/audit ext4 defaults 0 2" | tee -a /etc/fstab
      else
        echo "Temporary disk already present in /etc/fstab"
      fi

      cat /etc/fstab

      systemctl daemon-reload

      mount -a

  - mode: system # install Vault license
    script: |
      #!/bin/bash

      if [[ -n $VAULT_LICENSE ]]; then
        echo "VAULT_LICENSE=$VAULT_LICENSE" > /etc/vault.d/vault.env
      fi

  - mode: system # generate certificates
    script: |
      #!/bin/bash

      # avoid running the script on restarts
      if [[ -f /shikari-bootstrapped ]] then
        exit 0
      fi

      cd /etc/vault.d/certs

      consul tls cert create -domain vault -server -additional-ipaddress $(ip -json -4 addr show lima0  | jq -r '.[] | .addr_info[].local') -additional-dnsname ${HOSTNAME}.local
      
      chown -R vault:vault /etc/vault.d/certs/*

  - mode: system # configure Vault Server
    script: |
      #!/bin/bash

      # avoid running the script on restarts
      if [[ -f /shikari-bootstrapped ]]; then
        exit 0
      fi

      HOSTNAME=$(hostname -s)

      cat <<-EOF > /etc/vault.d/vault.hcl
      api_addr     = "https://${HOSTNAME}.local:8200"
      cluster_addr = "https://${HOSTNAME}.local:8201"
      
      ui = true
      log_level="trace"
      raw_storage_endpoint = "true"
      enable_response_header_hostname = "true"
      enable_response_header_raft_node_id = "true"

      reporting {
        license {
          enabled = false
        }
      }

      user_lockout "all" {
       disable_lockout = "true"
      }

      storage "raft" {
        path = "/opt/vault"
        node_id = "${HOSTNAME}"

        $(for x in $(seq $SHIKARI_SERVER_COUNT); do
        echo retry_join {
        echo leader_api_addr      = \"https://lima-${SHIKARI_CLUSTER_NAME}-srv-0$x.local:8200\"
        echo leader_ca_cert_file  = \"/etc/vault.d/certs/vault-agent-ca.pem\"
        echo }
       done)
      }

      listener "tcp" {
        address       = "0.0.0.0:8200"
        
        tls_cert_file       = "/etc/vault.d/certs/dc1-server-vault-0.pem"
        tls_key_file        = "/etc/vault.d/certs/dc1-server-vault-0-key.pem"
        tls_client_ca_file  = "/etc/vault.d/certs/vault-agent-ca.pem"
        
        cluster_address = "0.0.0.0:8201"

        telemetry {
          unauthenticated_metrics_access = true
        }
      }

      telemetry {
        enable_hostname_label = true
        disable_hostname = true
        prometheus_retention_time = "60s"
      }

      replication {
        allow_forwarding_via_header = true
        allow_forwarding_via_token = "new_token"
      }
      
      # this will disable perf standby even if the license allows
      #disable_performance_standby = true
      EOF

      # Use nomad to format the config file if it exists
      command -v nomad &>/dev/null && nomad fmt /etc/vault.d/vault.hcl

  - mode: system  # start and enable Vault
    script: |
      systemctl enable --now vault

  - mode: system  # init and unseal Vault
    script: |
      #!/usr/bin/env bash

      # avoid running the script on restarts

      if [[ -f /shikari-bootstrapped ]]; then
        exit 0
      fi

      export VAULT_ADDR=https://127.0.0.1:8200
      export VAULT_CACERT=/etc/vault.d/certs/vault-agent-ca.pem
      
      if [[ "$HOSTNAME" == *"01"* ]]; then
        
        until curl -s --cacert /etc/vault.d/certs/vault-agent-ca.pem $VAULT_ADDR/v1/sys/health; do
          echo "Waiting for Vault"
        done

        vault operator init -key-shares=1 -key-threshold=1 -format=json > ~/VaultCreds.json
        
        mv ~/VaultCreds.json /etc/vault.d/VaultCreds.json
        chown root:vault /etc/vault.d/VaultCreds.json
        chmod 0640 /etc/vault.d/VaultCreds.json

        mkdir /opt/vault/audit
        chown vault:vault /opt/vault/audit
        
        VAULT_UNSEAL_KEY=$(jq -r .unseal_keys_b64[0] < /etc/vault.d/VaultCreds.json)
        VAULT_TOKEN=$(jq -r .root_token < /etc/vault.d/VaultCreds.json)
        
        echo export VAULT_ADDR="https://127.0.0.1:8200" | tee -a /etc/profile.d/vault.sh
        echo export VAULT_CACERT=$VAULT_CACERT | tee -a /etc/profile.d/vault.sh
        echo export VAULT_UNSEAL_KEY=$VAULT_UNSEAL_KEY | tee -a /etc/profile.d/vault.sh 
        echo export VAULT_TOKEN=$VAULT_TOKEN | tee -a /etc/profile.d/vault.sh      

        # Unseal Vault      
        vault operator unseal ${VAULT_UNSEAL_KEY}

        vault login ${VAULT_TOKEN}

        # execute the following in a subshell to not overwrite VAULT_ADDR
        (
          if [[ $SHIKARI_SERVER_COUNT > 1 ]]; then
            for x in `seq 2 $SHIKARI_SERVER_COUNT`; do

              VAULT_ADDR="https://lima-${SHIKARI_CLUSTER_NAME}-srv-0$x.local:8200"

              until [ "$(curl -s --cacert $VAULT_CACERT $VAULT_ADDR/v1/sys/health | jq -r '.initialized')" = "true" ]; do
                echo "Waiting for Vault"
                sleep 2
              done

              vault operator unseal $VAULT_UNSEAL_KEY
            done
          fi
        )

        vault audit enable file file_path=/opt/vault/audit/vault-audit.log log_raw=true
      fi

      touch /shikari-bootstrapped

  - mode: system  # loop vault commands to create audit events and fill the disk
    script: |
      #!/usr/bin/env bash
      
      if [[ "$HOSTNAME" == *"01"* ]]; then

        source /etc/profile.d/vault.sh

        while true; do
          vault operator members
          if [ $? -ne 0 ]; then
            echo "Vault command failed. Exiting loop."
            break
          fi
          df -h
        done

      fi

copyToHost:
  - guest: "/etc/vault.d/certs/vault-agent-ca.pem"
    host: "{{.Dir}}/copied-from-guest/vault-agent-ca.pem"

networks:
  - lima: shared
vmType: qemu
env:
  SHIKARI_SCENARIO_NAME: "pl-disk-full-audit-logs"
